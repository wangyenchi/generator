var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  DEFAULT_EXTENSIONS: () => DEFAULT_EXTENSIONS,
  default: () => src_default,
  glslify: () => glslify
});
module.exports = __toCommonJS(src_exports);
var import_pluginutils = require("@rollup/pluginutils");

// src/files_compiler.ts
var import_glslify = require("glslify");
var import_path = __toESM(require("path"));
function filesCompiler(extFilter, options) {
  return {
    name: "vite-plugin-glslify:files",
    transform(code, id) {
      if (extFilter(id)) {
        return {
          code: `export default \`${(0, import_glslify.compile)(code, {
            ...options,
            basedir: import_path.default.dirname(id)
          })}\``
        };
      }
      return null;
    },
    handleHotUpdate(ctx) {
      if (!extFilter(ctx.file))
        return;
      const defaultRead = ctx.read;
      ctx.read = async () => {
        return (0, import_glslify.compile)(await defaultRead(), {
          ...options,
          basedir: import_path.default.dirname(ctx.file)
        });
      };
    }
  };
}

// src/literals_compiler.ts
var import_astring = require("astring");
var import_estree_walker = require("estree-walker");
var import_glslify2 = require("glslify");
var import_magic_string = __toESM(require("magic-string"));
var import_path2 = __toESM(require("path"));
function literalsCompiler(idFilter, funcFilter, options) {
  return {
    name: "vite-plugin-glslify:literals",
    transform(code, id) {
      if (!idFilter(id))
        return void 0;
      if (funcFilter(code)) {
        const ast = this.parse(code);
        const s = new import_magic_string.default(code);
        const compileAndOverwrite = (node, start, end) => {
          const target = (0, import_astring.generate)(node);
          try {
            const compiled = (0, import_glslify2.compile)(target.replace(/`/g, ""), {
              ...options,
              basedir: import_path2.default.dirname(id)
            });
            s.overwrite(start, end, `\`${compiled}\``);
          } catch (e) {
            this.error(e.message);
          }
        };
        (0, import_estree_walker.walk)(ast, {
          enter(node) {
            if (!node.type) {
              return;
            }
            if (node?.type === "TaggedTemplateExpression") {
              if (funcFilter(node.tag.name)) {
                const { start, end } = node;
                compileAndOverwrite(node.quasi, start, end);
              }
            } else if (node?.type === "CallExpression") {
              if (funcFilter(node.callee.name)) {
                const { start, end } = node;
                compileAndOverwrite(node.arguments[0], start, end);
              }
            }
          }
        });
        return {
          code: s.toString()
        };
      }
      return void 0;
    }
  };
}

// src/index.ts
var DEFAULT_EXTENSIONS = [/\.vert$/, /\.frag$/, /\.glsl$/];
function glslify(options = {}) {
  const plugins = [];
  const transformFiles = options.transformFiles ?? true;
  const transformLiterals = options.transformLiterals ?? true;
  const glslifyOptions = options.options ?? {};
  if (transformFiles) {
    const extFilter = (0, import_pluginutils.createFilter)(options.extensions || DEFAULT_EXTENSIONS);
    plugins.push(filesCompiler(extFilter, glslifyOptions));
  }
  if (transformLiterals) {
    const idFilter = (0, import_pluginutils.createFilter)(
      options.include || [/\.ts$/, /\.js$/],
      options.exclude || ["node_modules/**"]
    );
    const funcFilter = (0, import_pluginutils.createFilter)(options.funcName || [/glsl/]);
    plugins.push(literalsCompiler(idFilter, funcFilter, glslifyOptions));
  }
  return plugins;
}
var src_default = glslify;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DEFAULT_EXTENSIONS,
  glslify
});
