// src/index.ts
import { createFilter } from "@rollup/pluginutils";

// src/files_compiler.ts
import { compile } from "glslify";
import path from "path";
function filesCompiler(extFilter, options) {
  return {
    name: "vite-plugin-glslify:files",
    transform(code, id) {
      if (extFilter(id)) {
        return {
          code: `export default \`${compile(code, {
            ...options,
            basedir: path.dirname(id)
          })}\``
        };
      }
      return null;
    },
    handleHotUpdate(ctx) {
      if (!extFilter(ctx.file))
        return;
      const defaultRead = ctx.read;
      ctx.read = async () => {
        return compile(await defaultRead(), {
          ...options,
          basedir: path.dirname(ctx.file)
        });
      };
    }
  };
}

// src/literals_compiler.ts
import { generate } from "astring";
import { walk } from "estree-walker";
import { compile as compile2 } from "glslify";
import MagicString from "magic-string";
import path2 from "path";
function literalsCompiler(idFilter, funcFilter, options) {
  return {
    name: "vite-plugin-glslify:literals",
    transform(code, id) {
      if (!idFilter(id))
        return void 0;
      if (funcFilter(code)) {
        const ast = this.parse(code);
        const s = new MagicString(code);
        const compileAndOverwrite = (node, start, end) => {
          const target = generate(node);
          try {
            const compiled = compile2(target.replace(/`/g, ""), {
              ...options,
              basedir: path2.dirname(id)
            });
            s.overwrite(start, end, `\`${compiled}\``);
          } catch (e) {
            this.error(e.message);
          }
        };
        walk(ast, {
          enter(node) {
            if (!node.type) {
              return;
            }
            if (node?.type === "TaggedTemplateExpression") {
              if (funcFilter(node.tag.name)) {
                const { start, end } = node;
                compileAndOverwrite(node.quasi, start, end);
              }
            } else if (node?.type === "CallExpression") {
              if (funcFilter(node.callee.name)) {
                const { start, end } = node;
                compileAndOverwrite(node.arguments[0], start, end);
              }
            }
          }
        });
        return {
          code: s.toString()
        };
      }
      return void 0;
    }
  };
}

// src/index.ts
var DEFAULT_EXTENSIONS = [/\.vert$/, /\.frag$/, /\.glsl$/];
function glslify(options = {}) {
  const plugins = [];
  const transformFiles = options.transformFiles ?? true;
  const transformLiterals = options.transformLiterals ?? true;
  const glslifyOptions = options.options ?? {};
  if (transformFiles) {
    const extFilter = createFilter(options.extensions || DEFAULT_EXTENSIONS);
    plugins.push(filesCompiler(extFilter, glslifyOptions));
  }
  if (transformLiterals) {
    const idFilter = createFilter(
      options.include || [/\.ts$/, /\.js$/],
      options.exclude || ["node_modules/**"]
    );
    const funcFilter = createFilter(options.funcName || [/glsl/]);
    plugins.push(literalsCompiler(idFilter, funcFilter, glslifyOptions));
  }
  return plugins;
}
var src_default = glslify;
export {
  DEFAULT_EXTENSIONS,
  src_default as default,
  glslify
};
